// FreeFem++ code

// физические параметры (тест 1)
real Tmax = 773;
real StBol = 5.67e-8;
real a = 1.2;
real kappaa = 100;
real kappafull = 100;
real alpha = 1 / (3 * kappafull);
real refr = 1.47;
real b = 4 * StBol * Tmax ^ 3 * refr ^ 2;
real beta = 10;
real gamma = 0.3;
real L = 0.25; // сторона квадрата

/*
// физические параметры (тест 2)
real Tmax = 773;
real StBol = 5.67e-8;
real a = 0.0515;
real kappaa = 1;
real kappafull = 10;
real alpha = 1 / (3 * kappafull);
real refr = 1;
real b = 4 * StBol * Tmax ^ 3 * refr ^ 2;
real beta = 10;
real gamma = 0.3;
real L = 1; // сторона квадрата
*/

func real thetabfunc (real x1, real y1)
{
	if (x1 == 0 || x1 == L)
		return 0.5 + 0.5 * y1 / L;
	else if (y1 == 0)
		return 0.5;
	else if (y1 == L)
		return 1;
	else {
		cout << "\nx1 = " << x1 << "  y1 = " << y1 << "\n";
		assert(0);
	}
}
func thetab = thetabfunc(x, y);

int M = 300; // число подотрезков сетки
int N = 10;  // число итераций контрольного счета
int N1 = 8; // число итераций полного метода Ньютона
int N2 = 1000; // число итераций неполного метода Ньютона

mesh Th = square(M, M, [L * x, L * y]);
// plot(Th);

macro Grad(w) [dx(w),dy(w)] //
fespace Vh(Th, P1);
Vh phi, theta, v, w, theta0;

// Контрольный счет полным методом Ньютона
cout << "Calculate the exact solution\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N; iter++) {
  solve CalcSol([phi, theta], [v, w]) =
      int2d(Th)(alpha * Grad(phi)' * Grad(v))
    + int2d(Th)(kappaa * phi * v)
    - int2d(Th)(kappaa * 4 * theta0 ^ 3 * theta * v)
    + int2d(Th)(kappaa * 3 * theta0 ^ 4 * v)
    + int1d(Th)(gamma * phi * v)
    - int1d(Th)(gamma * thetab ^ 4 * v)
    //...
    + int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * phi * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  Vh tmp = abs(theta - theta0);
  cout << "iter = " << iter << "    diff = " << tmp[].max << endl;
  theta0 = theta;
}
Vh exact = theta;

// Полный метод Ньютона
ofstream fout1("compl.txt");
cout << "\n\nComplete method\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N1; iter++) {
  solve CalcSol([phi, theta], [v, w]) =
      int2d(Th)(alpha * Grad(phi)' * Grad(v))
    + int2d(Th)(kappaa * phi * v)
    - int2d(Th)(kappaa * 4 * theta0 ^ 3 * theta * v)
    + int2d(Th)(kappaa * 3 * theta0 ^ 4 * v)
    + int1d(Th)(gamma * phi * v)
    - int1d(Th)(gamma * thetab ^ 4 * v)
    //...
    + int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * phi * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  Vh tmp = abs(theta - exact);
  real diff = tmp[].max;
  cout << "iter = " << iter << "    diff = " << diff << endl;
  fout1 << iter << "   " << diff << endl;
  theta0 = theta;
}

// Неполный метод Ньютона
ofstream fout2("incompl.txt");
cout << "\n\nIncomplete method\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N2; iter++) {
  solve CalcPhi(phi, v) =
      int2d(Th)(alpha * Grad(phi)' * Grad(v))
    + int2d(Th)(kappaa * phi * v)
    - int2d(Th)(kappaa * theta0 ^ 4 * v)
    + int1d(Th)(gamma * phi * v)
    - int1d(Th)(gamma * thetab ^ 4 * v);

  solve CalcTheta(theta, w) =
      int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * phi * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  Vh tmp = abs(theta - exact);
  real diff = tmp[].max;
  cout << "iter = " << iter << "    diff = " << diff << endl;
  fout2 << iter << "   " << diff << endl;
  theta0 = theta;
}

plot(theta, fill = 1, wait = 1, value = 1);
plot(phi, fill = 1, wait = 1, value = 1);
Vh d = theta - exact;
plot(d, fill = 1, wait = 1, value = 1);
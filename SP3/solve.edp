// FreeFem++ code

/*
// физические параметры (тест 1)
// среда - стекло
real Tmax = 773;
real StBol = 5.67e-8;
real a = 1.2;
real kappaa = 100;
real kappafull = 100;
real alpha = 1 / (3 * kappafull);
real refr = 1.47;
real b = 4 * StBol * Tmax ^ 3 * refr ^ 2;
real beta = 10;
real gamma = 0.3;
real L = 0.25; // сторона квадрата
*/
/*
// kappa_full = 100, eps = 0.75, rho_d = 0
real alpha1 = 1.1559e-03;
real alpha2 = 7.4156e-03;
real beta11 = 0.166337;
real beta12 = 0.011181;
real beta21 = 0.020962;
real beta22 = 0.508663;
real eta1 = beta11 + beta12;
real eta2 = beta21 + beta22;
real omega1 = 0.6521;
real omega2 = 0.3479;
*/
/*
// kappa_full = 100, eps = 0.75, rho_d = 0.2
real alpha1 = 1.1559e-03;
real alpha2 = 7.4156e-03;
real beta11 = 0.216030;
real beta12 = -0.038513;
real beta21 = -0.072202;
real beta22 = 0.601827;
real eta1 = beta11 + beta12;
real eta2 = beta21 + beta22;
real omega1 = 0.6521;
real omega2 = 0.3479;
*/


// физические параметры (тест 2)
// среда - воздух
real Tmax = 773;
real StBol = 5.67e-8;
real a = 0.0515;
real kappaa = 1;
real kappafull = 10;
real alpha = 1 / (3 * kappafull);
real refr = 1;
real b = 4 * StBol * Tmax ^ 3 * refr ^ 2;
real beta = 10;
real gamma = 0.5 / (2 * (2 - 0.5));  //eps = 0.5
real L = 1; // сторона квадрата
/*
// kappa_full = 10, eps = 0.75, rho_d = 0
real alpha1 = 1.1559e-02;
real alpha2 = 7.4156e-02;
real beta11 = 0.166337;
real beta12 = 0.011181;
real beta21 = 0.020962;
real beta22 = 0.508663;
real eta1 = beta11 + beta12;
real eta2 = beta21 + beta22;
real omega1 = 0.6521;
real omega2 = 0.3479;
*/
/*
// kappa_full = 10, eps = 0.75, rho_d = 0.2
real alpha1 = 1.1559e-02;
real alpha2 = 7.4156e-02;
real beta11 = 0.216030;
real beta12 = -0.038513;
real beta21 = -0.072202;
real beta22 = 0.601827;
real eta1 = beta11 + beta12;
real eta2 = beta21 + beta22;
real omega1 = 0.6521;
real omega2 = 0.3479;
*/
// kappa_full = 10, eps = 0.5, rho_d = 0.2
real alpha1 = 1.1559e-02;
real alpha2 = 7.4156e-02;
real beta11 = 0.125857;
real beta12 = -0.027236;
real beta21 = -0.051061;
real beta22 = 0.345297;
real eta1 = beta11 + beta12;
real eta2 = beta21 + beta22;
real omega1 = 0.6521;
real omega2 = 0.3479;

func real thetabfunc (real x1, real y1)
{
	if (x1 == 0 || x1 == L)
		return 0.5 + 0.5 * y1 / L;
	else if (y1 == 0)
		return 0.5;
	else if (y1 == L)
		return 1;
	else {
		cout << "\nx1 = " << x1 << "  y1 = " << y1 << "\n";
		assert(0);
	}
}
func thetab = thetabfunc(x, y);

int M = 100; // число подотрезков сетки
int N1 = 10; // число итераций полного метода Ньютона (P1)
int N2 = 500; // число итераций неполного метода Ньютона (SP3)
int N3 = 10; // число итераций полного метода Ньютона (SP3)

mesh Th = square(M, M, [L * x, L * y]);
// plot(Th);

macro Grad(w) [dx(w),dy(w)] //
fespace Vh(Th, P1);
Vh phi, theta, v, w, theta0, psi1, psi2, v1, v2;

// Полный метод Ньютона
ofstream fout1("P1.txt");
cout << "\n\nP1 approximation\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N1; iter++) {
  solve CalcSol([phi, theta], [v, w]) =
      int2d(Th)(alpha * Grad(phi)' * Grad(v))
    + int2d(Th)(kappaa * phi * v)
    - int2d(Th)(kappaa * 4 * theta0 ^ 3 * theta * v)
    + int2d(Th)(kappaa * 3 * theta0 ^ 4 * v)
    + int1d(Th)(gamma * phi * v)
    - int1d(Th)(gamma * thetab ^ 4 * v)
    //...
    + int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * phi * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  cout << "iteration " << iter << endl;
  theta0 = theta;
}
plot(theta, fill = 1, wait = 1, value = 1);
plot(phi, fill = 1, wait = 1, value = 1);

for (int i = 0; i <= 100; ++i) {
  for (int j = 0; j <= 100; ++j) {
    real x = i * L / 100;
    real y = j * L / 100;
    fout1 << x << "  " << y << "  " << phi(x, y) << "  " << theta(x, y) << endl;
  }
}

Vh theta1, phi1;
theta1 = theta;
phi1 = phi;

/*
// Неполный метод Ньютона
ofstream fout3("SP3.txt");
cout << "\n\nSP3 approximation\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N2; iter++) {
  solve CalcPsi([psi1, psi2], [v1, v2]) =
      int2d(Th)(alpha1 * Grad(psi1)' * Grad(v1))
    + int2d(Th)(alpha2 * Grad(psi2)' * Grad(v2))
    + int2d(Th)(kappafull * psi1 * v1)
    - int2d(Th)((kappafull - kappaa) * (omega1 * psi1 + omega2 * psi2) * v1)
    - int2d(Th)(kappaa * theta0 ^ 4 * v1)
    + int2d(Th)(kappafull * psi2 * v2)
    - int2d(Th)((kappafull - kappaa) * (omega1 * psi1 + omega2 * psi2) * v2)
    - int2d(Th)(kappaa * theta0 ^ 4 * v2)
    + int1d(Th)((beta11 * psi1 + beta12 * psi2) * v1)
    + int1d(Th)((beta21 * psi1 + beta22 * psi2) * v2)
    - int1d(Th)(eta1 * thetab ^ 4 * v1)
    - int1d(Th)(eta2 * thetab ^ 4 * v2);
   
  phi = omega1 * psi1 + omega2 * psi2;

  solve CalcTheta(theta, w) =
      int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * phi * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  cout << "iteration " << iter << endl;
  theta0 = theta;
}
*/

// Полный метод Ньютона
ofstream fout3("SP3.txt");
cout << "\n\nSP3 approximation\n\n";
theta0 = 1; // начальное приближение
for (int iter = 1; iter <= N3; iter++) {
  solve CalcSP3([psi1, psi2, theta], [v1, v2, w]) =
      int2d(Th)(alpha1 * Grad(psi1)' * Grad(v1))
    + int2d(Th)(alpha2 * Grad(psi2)' * Grad(v2))
    + int2d(Th)(kappafull * psi1 * v1)
    - int2d(Th)((kappafull - kappaa) * (omega1 * psi1 + omega2 * psi2) * v1)
    - int2d(Th)(kappaa * 4 * theta0 ^ 3 * theta * v1)
    + int2d(Th)(kappaa * 3 * theta0 ^ 4 * v1)
    + int2d(Th)(kappafull * psi2 * v2)
    - int2d(Th)((kappafull - kappaa) * (omega1 * psi1 + omega2 * psi2) * v2)
    - int2d(Th)(kappaa * 4 * theta0 ^ 3 * theta * v2)
    + int2d(Th)(kappaa * 3 * theta0 ^ 4 * v2)
    + int1d(Th)((beta11 * psi1 + beta12 * psi2) * v1)
    + int1d(Th)((beta21 * psi1 + beta22 * psi2) * v2)
    - int1d(Th)(eta1 * thetab ^ 4 * v1)
    - int1d(Th)(eta2 * thetab ^ 4 * v2)
    + int2d(Th)(a * Grad(theta)' * Grad(w))
    - int2d(Th)(b * kappaa * (omega1 * psi1 + omega2 * psi2) * w)
    + int2d(Th)(b * kappaa * 4 * theta0 ^ 3 * theta * w)
    - int2d(Th)(b * kappaa * 3 * theta0 ^ 4 * w)
    + int1d(Th)(beta * theta * w)
    - int1d(Th)(beta * thetab * w);

  phi = omega1 * psi1 + omega2 * psi2;

  cout << "iteration " << iter << endl;
  theta0 = theta;
}


for (int i = 0; i <= 100; ++i) {
  for (int j = 0; j <= 100; ++j) {
    real x = i * L / 100;
    real y = j * L / 100;
    fout3 << x << "  " << y << "  " << phi(x, y) << "  " << theta(x, y) << endl;
  }
}

plot(theta, fill = 1, wait = 1, value = 1);
plot(phi, fill = 1, wait = 1, value = 1);
